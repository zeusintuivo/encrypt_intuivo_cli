#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
# : Execute "${@}"
#
# !!! ¡ ☠ Say error "${@}" and exit
#
# - Anounce "${@}"
# · • Say "${@}"
# “ Comment "${@}"
#
load_execute_command(){
    local URL=""
    local EXECOMCLI=""
    local provider=""
    [ -d "/Users/benutzer/_/clis/execute_command_intuivo_cli/" ] \
    &&  provider="file:///Users/benutzer/_/clis/execute_command_intuivo_cli/"
    [ ! -d "/Users/benutzer/_/clis/execute_command_intuivo_cli/" ] \
    && provider="https://raw.githubusercontent.com/\
zeusintuivo/execute_command_intuivo_cli/master/"
    local BASH_SCRIPTS="
execute_command
execute_command_minifunctions
"
    while read -r ONE_SCRIPT; do
        # if not empty
        if [ ! -z "${ONE_SCRIPT}" ] ; then
            URL="${provider}${ONE_SCRIPT}"
            EXECOMCLI=$(curl $URL  2>/dev/null )   # suppress only curl download messages, but keep curl output for variable
            eval """${EXECOMCLI}"""
            - $URL Loaded

        fi
    done <<< "${BASH_SCRIPTS}"
    unset URL
    unset EXECOMCLI
    unset ONE_SCRIPT
    unset BASH_SCRIPTS
    unset provider
} # end function load_execute_command
load_execute_command



# : Execute "${@}"      - Anounce "${@}"      · • Say "${@}"     “ Comment "${@}"
# !!! ¡ ☠ Say error "${@}" and exit

# - This is script starts              1. Anounce
# : Do something                       2. Do something

# · I will show a list of files        1.1. Add explanation
# : ls                                 2.1 Do more

# “ I got something to say about it    1.2 Say something like a comment - can go anyẃhere
# · I will show a list of files
# : ls
# ¡ This is all wrong                   3. Says something and kill execution

# provide_help -help                     4. Supposed to show a list with all the functions

# echo "hola mark + " | highlight_commander
¡ stop
check_params(){
    echo -e " "
    echo -e "${orange208} This tests creating new user, and
login as the new user and logout install ${reset}"
    echo -e " "

    echo -e "${blue23} • ${blue30} Checking for Elevated \
    Root Permisions  ${reset} "
    if [ "$EUID" -ne 0 ] ;  then
    {
        echo -e " "
        echo -e " ${red} ERROR! Please run as root ${reset}"
        echo -e " "
        exit 130
    }
    fi

    WHOWHO=$(whoami)
    echo -e "${blue23} • ${blue30} Checking if you are root  ${reset}"
    if [[ "${WHOWHO}" != "root" ]] ;  then
    {
        echo -e " "
        echo -e " ${red} ERROR! Please run as root: Who am
    i says you are: $WHOWHO ${reset}"
        echo -e " "
        exit 130
    }
    fi




    echo -e "${blue23} • ${blue30} Checking user Parameter "
    TARGET_USER="vagrant"
    if [ ! -z "${1}" ] ;  then
        TARGET_USER="${1}"
    fi
    echo -e " ${lightpurple}+---${lightyellow} param: $TARGET_USER ${reset}"
    echo -e " ${lightpurple}+---${lightyellow} Checking \
    if $TARGET_USER exists ${gray242}"
    LIST_ALL_USERS=$(cut -d: -f1 /etc/passwd) # REF: http://askubuntu.com/questions/410244/a-command-to-list-all-users-and-how-to-add-delete-modify-users
    USERID=$(id -u ${TARGET_USER})
    # Alternative to check getent passwd $user  > /dev/null
    # Alternative to check getent passwd mongodb  > /dev/null
    THISSCRIPTNAME=`basename "$0"`

    if [ -z "${USERID}" ] ; then
    {
        echo -e "
    ${red}  ERROR! The user '$TARGET_USER'
    you provided does not exist

    ${orange208}  Please use like:

        $THISSCRIPTNAME username_here

    Sample:

        $THISSCRIPTNAME zeus      <-- This will work on the zeus folder
    ${reset}"
        exit 130
    }
    fi


    echo -e " ${lightpurple}+---${lightyellow} $TARGET_USER homefolder"
    if [ ! -d /home/$TARGET_USER ] ; then
    {
        echo -e " "
        echo -e "${red} ERROR! The user you provided does not have a \
        home folder, you need to login at least once for this folder \
        to be created. ${reset}"
        echo -e " ${reset} "
        exit 130
    }
    fi

} # end function check_params
check_params $*

